<?php

namespace ZendFlattenRoute\Facade;

use InvalidArgumentException;
use ZendFlattenRoute\Hydrator\FlattenRouteHydrator;
use ZendFlattenRoute\Hydrator\Helper\FlattenRouteStack;
use ZendFlattenRoute\Hydrator\MethodRouteHydrator;
use ZendFlattenRoute\Hydrator\TrailingSlashHydrator;
use ZendFlattenRoute\Model\FlattenChildRoute;
use ZendFlattenRoute\Service\Composite\FlattenRouteConfiguration;
use ZendFlattenRoute\Service\FlattenRouteService;

/**
 * Class FlattenRouteFacade
 * @package ZendFlattenRoute\Facade
 *
 * @author Til Anheier <til.anheier@check24.de>
 */
class FlattenRouteFacade
{

    /**
     * @var FlattenRouteService $service
     */
    private $service;

    /**
     * FlattenRouteFacade constructor.
     *
     * options:
     * - flattenRoute: Creates an flatten route array.
     *   Expected configuration:
     *      'flattenRoute' => 'true'
     *
     * - trailingSlash: Removes all trailing slashes by the flatten route array.
     *   Expected configuration:
     *      'trailingSlash' => 'true'
     *
     * - methodRoute: Methods can be added to child routes of the route.
     *   The methodRoute option expects an nested array with the name of parent and child route.
     *   The expected array should be look like:
     *      array('parentRouteName' =>
     *          'childRouteName' => array(
     *              'type' => '...',
     *              'options' => '...',
     *          )
     *      )
     *
     * @param array $options
     */
    public function __construct(array $options = [])
    {
        $routeStack = new FlattenRouteStack();
        $hydrator = new FlattenRouteConfiguration();

        if (isset($options['flattenRoute'])) {
            $hydrator->addHydrator(new FlattenRouteHydrator($routeStack));
        }

        if (isset($options['trailingSlash'])) {
            $hydrator->addHydrator(new TrailingSlashHydrator($routeStack));
        }

        if (isset($options['methodRoute'])) {
            if (!is_array($options['methodRoute'])) {
                throw new InvalidArgumentException("methodRoute is not type of array.");
            }

            if (empty($options['methodRoute'])) {
                throw new InvalidArgumentException("methodRoute array is empty.");
            }

            $methodRouteHydrator = new MethodRouteHydrator($routeStack);
            foreach ($options['methodRoute'] as $oName => $option) {
                if (count($option) > 1) {
                    continue;
                }

                foreach ($option as $ocName => $cOption) {
                    $methodRouteHydrator->addChildRoute($oName, $ocName, new FlattenChildRoute($cOption));
                }
            }

            $hydrator->addHydrator($methodRouteHydrator);
        }

        $this->service = new FlattenRouteService($hydrator);
    }

    /**
     * Creates an flatten array and save it in a configuration file.
     *
     * @param array $routes
     * @param string $outputDir
     */
    public function getFlattenRoutes(array $routes, string $outputDir)
    {
        $flattenRoutes = $this->service->getFlattenRoutes($routes);
        $flattenRoutesSerialized = $this->service->flattenRoutesToArray($flattenRoutes);
        $fileName = "router.config.php";
        $currentDir = __DIR__ . "../../../config/" . $fileName;

        file_put_contents($currentDir, "<?php 
/**
* Autogenerated file by flatten-route-service.
*/
        
return array(
'routes' => " . var_export($flattenRoutesSerialized, true) . ");");

        if ($outputDir !== "") {
            if (!@copy($currentDir, $outputDir . $fileName)) {
                $errors = error_get_last();
                echo json_encode($errors);
            }
        }
    }
}
